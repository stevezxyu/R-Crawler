# R crawler
# R 語言的文字函數

my_name <- "Steve Yu"
# nchar() 計算文字的字元數
nchar(my_name)

# paste() 將數個文字連結為一個文字
first_name <- "Steve"
last_name <- "Yu"
paste(first_name, last_name, sep = "...")

first_word <- "How"
second_word <- "you"
third_word <- "doing?"
# 將這三個字連結為一句話
paste(first_word, second_word, third_word)
paste(first_word, second_word, third_word, sep = "")     # sep 是產出等差的向量
paste(first_word, second_word, third_word, sep = ",")

# sprintf() 是paste() 函數的強化版
sentence <- "My name is: %s, My favorite food is: %s"
name1 <- "Steve"
name2 <- "Steven"
food1 <- "Burger"
food2 <- "Pizza"
sprintf(sentence, name1, food1)
sprintf(sentence, name2, food2)

# 練習1
# %s 放置字元、%d 放置數字
# 印出 I can easily have 3 sandwiches a day.
favorite_food <- "sandwiches"
how_many <- 3
sprintf("I can easily have %d %s a day.", how_many, favorite_food)       # 數字若是為%s, 則自動被轉換為%d

sentence <- "I can easily have 3 sandwiches a day."
sentence


# toupper() 將文字全部轉換為大寫
# tolower() 將文字全部轉換為小寫
name1 <- "Steve"
toupper(name1)      # 將 name 全部轉換為大寫
tolower(name1)      # 將 name 全部轉換為小寫

# substr() 擷取文字的某個部分
my_full_name <- "Steve Yu"
# 透過 substr() 分別擷取出姓、名
my_first_name <- substr(my_full_name, start = 1, stop = 5)
my_last_name <- substr(my_full_name, start = 7, stop = 8)
my_first_name
my_last_name

# 練習2
another_favorite_character <- "Phoebe Buffay"
her_first_name <- substr(another_favorite_character, start = 1, stop = 6)
her_last_name <- substr(another_favorite_character, start = 8, stop = 13)
her_first_name
her_last_name
# 使用nchar() 計算總共字元數作為stop的數值
nchar(another_favorite_character)


# strsplit() 將一個文字依照分隔符號（split）拆開為數個文字
strsplit(another_favorite_character, split = " ")
split_res <- strsplit(another_favorite_character, split = " ")
first_name <- split_res[[1]][1]      # list 中第1個元件, 第1個索引值
last_name <- split_res[[1]][2]       # list 中第1個元件, 第2個索引值

split_res_list <- strsplit(another_favorite_character, split = " ")
split_res_vector <- split_res_list[[1]]   # list 中第1個元件
first_name <- split_res_vector[1]         # vector 中第1個向量值
last_name <- split_res_vector[2]          # vector 中第2個向量值

first_name
last_name

# 練習3
another_sentence <- "We,were,on,a,break!"
strsplit(another_sentence, split = ",")[[1]][5]     # list 中第1個元件, 第5個索引值


# regexpr() 尋找單一文字中的指定特徵並回傳第一個找到的索引值
another_sentence <- "We,were,on,a,break!"
# 尋找 a
regexpr(pattern = "a", another_sentence)            # 尋找到第1個字母match後回傳位置, 就不再尋找後續的字母

# gregexpr() 尋找單一文字中的指定特徵並回傳全部的索引值
gregexpr(pattern = "a", another_sentence)

# 練習4
# 尋找所有的 smelly
a_sentence <- "smelly cat, smelly cat, what are they feeding you?"
gregexpr(pattern = "smelly", a_sentence)


# grep() 尋找文字向量中的指定特徵並回傳索引值
"we were on a break!"
c("We", "were", "on", "a", "break!")
gregexpr(pattern = "e", "we were on a break!")                  # 尋找單一字元的位置
grep(pattern = "e", c("We", "were", "on", "a", "break!"))       # 尋找單一向量的位置

# 練習5
a_sentence <- c("Joey", "doesn't", "share", "food!")
# 尋找 share
grep(pattern = "share", a_sentence)
# 尋找 FOOD
grep(pattern = "FOOD", a_sentence)    # 找不到回傳 integer(0)


# grepl() 跟 grep() 相似，只是以邏輯值（logical）回傳而非索引值
grepl(pattern = "e", a_sentence)

# sub() 尋找文字中的指定特徵並取代第一個為指定文字
sub(pattern = " " , "we were on a break!", replacement = "~")

# gsub() 尋找文字中的指定特徵並全部取代為指定文字
gsub(pattern = " " , "we were on a break!", replacement = "~")

# 練習6
# 將 hamburger 取代為 sandwich
a_sentence <- "You threw my hamburger away. My hamburger? My hamburger?"
gsub(pattern = "hamburger", replacement = "sandwich", a_sentence)

